<?xml version="1.0" encoding="UTF-8"?>
<!--
   Project:Easy Web Framework
   Description:
   EasyFK stands for Easy Web Framework.It's an open source product for E-Business / E-Commerce.It
   was launched by a chinese Hezhiping(QQ:110476592) in 2015.The goal of EasyFK is to  provide a
   foundation and starting point for reliable, secure , simple-to-use ,cost-effective ,scalable
   and suitable-for-Chinese E-Business / E-Commerce solutions. With EasyFK, you can get started
   right away without the huge deployment and maintenance costs of E-Business / E-Commerce systems.
   Of course, you can customize it or use it as a framework to implement your most challenging business needs.
   EasyFk is licensed under the Apache License Version 2.0.  You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
   Author:hezhiping   Email:110476592@qq.com
-->

<project name="easyfk" default="build" basedir="."
    xmlns:ivy="antlib:org.apache.ivy.ant"
    xmlns:sonar="antlib:org.sonar.ant:sonar">

    <import file="macros.xml"/>
    <property name="site.dir" value="../site"/>
    <property name="memory.initial.param" value="-Xms128M"/>
    <property name="memory.max.param" value="-Xmx512M"/>
    <property name="pos.memory.max.param" value="-Xmx512M"/>
    <property name="memory.maxpermsize.param" value="-XX:MaxPermSize=512m"/>
    <property name="ftlfile.encoding" value="-Dfile.encoding=UTF-8"/>
    		 
	
    <available file="baseapps/build.xml" property="baseapps.present"/>
     
    <!-- ================================================================== -->
    <!-- Initialization of all property settings                            -->
    <!-- ================================================================== -->

    <target name="init">
        <property environment="env"/>
    </target>

    <target name="ivy-init">
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
            uri="antlib:org.apache.ivy.ant">
            <classpath>
                <pathelement location="core/base/lib/ivy-2.2.0.jar" />
            </classpath>
        </taskdef>
    </target>
    <target name="sonar-init">
        <taskdef uri="antlib:org.sonar.ant:sonar" resource="org/sonar/ant/antlib.xml">
            <classpath>
                <pathelement location="core/base/lib/sonar-ant-task-1.3.jar" />
            </classpath>
        </taskdef>
    </target>

    <!-- ================================================================== -->
    <!-- Removes all created files and directories                          -->
    <!-- ================================================================== -->

    <target name="refresh"
          description="Clean all and rebuild">
        <antcall target="clean-all"/>
        <antcall target="build"/>
    </target>

    <target name="clean-all"
          description=" 清理工程" depends="stop">
         
        <antcall target="clean-logs"/>
        <antcall target="clean-output"/>
        <antcall target="clean-xtra"/>
        <antcall target="clean-catalina"/>
        <antcall target="clean-cache"/>
        <antcall target="clean-tempfiles"/>
        <antcall target="clean"/>
		<antcall target="clean-dist"/>
    </target>

    
   

    <target name="clean-logs"
          description="Clean all logs in runtime/logs">
        <subant target="clean-logs">
            <filelist dir="." files="core/build.xml"/>
        </subant>
    </target>
	
	<target name="clean-tmp"
	          description="Clean all tmp in runtime/tmp">
	        <subant target="clean-tmp">
	            <filelist dir="." files="core/build.xml"/>
	        </subant>
	    </target>

    <target name="clean-output"
          description="Clean runtime/output directory">
        <subant target="clean-output">
            <filelist dir="." files="core/build.xml"/>
        </subant>
    </target>

    <target name="clean-xtra"
          description="Clean all other files like .rej, .orig, etc.">
        <delete verbose="on">
            <fileset dir="." includes="**/.nbattrs,**/*~,**/.#*,**/.DS_Store,**/*.rej,**/*.orig"/>
        </delete>
    </target>

    <target name="clean-catalina"
          description="Clean Catalina data in runtime/catalina/work">
        <subant target="clean-catalina">
            <filelist dir="." files="core/build.xml"/>
        </subant>
    </target>

   <target name="clean-cache"
           description="Clean the UtilCache file if errors found with old objects in the cache (Java runtime error something like 'local class incompatible')">
        <property file="core/base/config/cache.properties"/>
        <echo message="NOTICE: deleting ${cache.file.store}.db"/>
        <delete file="${cache.file.store}.db" verbose="true"/>
    </target>

    <target name="clean-tempfiles"
          description="Remove files located in runtime/tempfiles (captcha, etc...)">
        <subant target="clean-tempfiles">
            <filelist dir="." files="core/build.xml"/>
        </subant>
    </target>
 

    <target name="tests" depends="init">
        <subant target="tests">
            <filelist dir="." files="core/build.xml"/>
        </subant>
    </target>

    <target name="clean">
        <subant target="clean">
            <fileset dir="${basedir}/hot-deploy" casesensitive="no">
                <include name="*/build.xml"/>
            </fileset>
        </subant>

        <subant target="clean"  failonerror="${baseapps.present}"
          description="Use failonerror=false in case the baseapps directory is not there">
            <filelist dir="." files="baseapps/build.xml"/>
        </subant>
       
        <subant target="clean">
            <filelist dir="." files="core/build.xml"/>
        </subant>
        <delete file="easyfk.jar"/>
        <echo message="[clean] ========== Done Cleaning =========="/>
    </target>

     

    <!-- ================================================================== -->
    <!-- Build Components                                                   -->
    <!-- ================================================================== -->

    <target name="build" depends="init" description="编译工程">
        <echo message="[build] ========== Start Building (Compile) =========="/>

        <subant inheritall="false">
            <filelist dir="." files="core/build.xml"/>
        </subant>
        <subant inheritall="false" failonerror="${baseapps.present}">
            <filelist dir="." files="baseapps/build.xml"/>
        </subant>
         

        <!-- a check is done, if no build.xml file is present in hot-deploy dir,
            then the build.xml files - if present - in hot-deploy sub-dirs will be used.
            So the previous, simpler, behaviour is kept as long as you don't need 
            to build hot-deploy components in a specific order. -->
        <if>
          <available file="hot-deploy/build.xml" property="useHotDeployBuild"/>
          <then>
            <subant inheritall="false">
              <filelist dir="." files="hot-deploy/build.xml"/>
            </subant>
          </then>
          <else>
            <subant inheritall="false">
              <fileset dir="${basedir}/hot-deploy" casesensitive="no">
                <exclude name="disabled/**"/>
                <include name="*/build.xml"/>
              </fileset>
            </subant>
          </else>
        </if>
        
        <echo message="[build] ========== Done Building (Compile) =========="/>
    </target>

    <!-- ================================================================== -->
    <!-- Build JavaDocs                                                     -->
    <!-- ================================================================== -->

    <target name="docs" depends="init" description="生成API文档">
        <echo message="[docs] ========== Start Building (JavaDoc) =========="/>

        <subant target="docs">
            <filelist dir="." files="core/build.xml"/>
        </subant>
        <subant target="docs" failonerror="${baseapps.present}">
            <filelist dir="." files="baseapps/build.xml"/>
        </subant>
         
        <subant target="docs">
            <fileset dir="${basedir}/hot-deploy" casesensitive="no">
                <include name="*/build.xml"/>
            </fileset>
        </subant>

        <echo message="[docs] ========== Done Building (JavaDocs) =========="/>
    </target>

    <target name="docs-all" depends="build,init"
            description="生成所有工程文档">

        <echo message="[docs-all] ========== Start Building (JavaDoc) =========="/>

        <mkdir dir="${site.dir}/javadocs"/>
        
        <path id="local.class.path">
          <fileset dir="${easyfk.home.dir}/core/base/lib" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/base/lib/commons" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/base/lib/j2eespecs" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/base/lib/scripting" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/catalina/lib" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/entity/lib" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/service/lib" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/testtools/lib" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/webapp/lib" includes="*.jar"/>
          <fileset dir="${easyfk.home.dir}/core/webapp/build/lib" includes="*.jar"/>
        </path>
        
        <property name="desc" value="API"/>
        <property name="build.dir" value="${site.dir}"/>
        
        <default-javadoc/>
        
        <echo message="[docs-all] ========== Done Building (JavaDocs) =========="/>
   </target>

   
    <!-- ================================================================== -->
    <!-- Start and Stop                                                          -->
    <!-- ================================================================== -->
	<target name="start" depends="apply-start"
	            description="启动服务器">
	</target>
	
    <target name="apply-start"
            description="启动服务器">
        <java jar="easyfk.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${pos.memory.max.param}"/>
            <jvmarg value="${memory.maxpermsize.param}"/>
        	<jvmarg value="${ftlfile.encoding}"/>
        	 
        </java>
    </target>
	
	 
    <target name="start-batch"
            description="Start EasyFK as a separate process">
        <java jar="easyfk.jar" fork="true" spawn="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${pos.memory.max.param}"/>
            <jvmarg value="${memory.maxpermsize.param}"/>
        	<jvmarg value="${ftlfile.encoding}"/>
        	        	
        </java>
    </target>
	
	<target name="start-debug" depends="apply-start-debug"
		            description="调试模式启动服务器">
	</target>
	
    <target name="apply-start-debug"
            description="调试模式启动服务器">
        <java jar="easyfk.jar" fork="true">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <jvmarg value="${memory.maxpermsize.param}"/>
        	<jvmarg value="${ftlfile.encoding}"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Djava.compiler=NONE"/>
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8008"/>
        </java>
    </target>
    
	<target name="stop" depends="apply-stop"
			            description="停止服务器">
	</target>
	
    <target name="apply-stop"
            description="停止服务器">
        <java jar="easyfk.jar" fork="true">
            <arg value="-shutdown"/>
        </java>
    </target>
	
    <target name="status"
            description="显示服务器状态">
        <java jar="easyfk.jar" fork="true">
            <arg value="-status"/>
        </java>
    </target>

    

    <target name="run-tests" depends="build"
          description="Run EasyFK default tests; you have to manually execute 'ant load-demo' before and see results in runtime/logs/test-results/html/all-tests.html.">
        <java jar="easyfk.jar" fork="true" resultproperty="test.result">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <jvmarg value="${memory.maxpermsize.param}"/>
            <arg value="test"/>
            <env key="LC_ALL" value="C"/>
        </java>
        <mkdir dir="runtime/logs/test-results/html"/>
        <junitreport todir="runtime/logs/test-results">
            <fileset dir="runtime/logs/test-results/">
                <include name="*.xml"/>
            </fileset>
            <report format="frames" todir="runtime/logs/test-results/html"/>
        </junitreport>
        <fail message="Test run was unsuccessful">
            <condition>
                <not>
                    <equals arg1="${test.result}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="run-test" depends="build"
          description="Run a single test, syntax eg: ant run-test -Dtest.component=service -Dtest.case=service-soap-tests">
        <fail unless="test.component">test.component is a required parameter: -Dtest.component=componentname</fail>
        <fail unless="test.case">test.case is a required parameter: -Dtest.case=testcasename</fail>
        <java jar="easyfk.jar" fork="true" resultproperty="test.result">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <jvmarg value="${memory.maxpermsize.param}"/>
            <arg value="test"/>
            <arg value="-component=${test.component}"/>
            <arg value="-case=${test.case}"/>
            <env key="LC_ALL" value="C"/>
        </java>
        <delete dir="runtime/logs/test-results/${test.component}-${test.case}"/>
        <mkdir dir="runtime/logs/test-results/${test.component}-${test.case}"/>
        <move todir="runtime/logs/test-results/${test.component}-${test.case}">
            <fileset dir="runtime/logs/test-results" includes="*.xml"/>
        </move>
        <fail message="Test run was unsuccessful">
            <condition>
                <not>
                    <equals arg1="${test.result}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
    <target name="run-test-suite" depends="build"
            description="Run a single test suite, syntax eg: ant run-test-suite -Dtest.component=mycomponent -Dtest.suiteName=mytests">
        <fail unless="test.component">test.component is a required parameter: -Dtest.component=componentname</fail>
        <fail unless="test.suiteName">test.suiteName is a required parameter: -Dtest.suiteName=testsuitename</fail>
        <java jar="easyfk.jar" fork="true" resultproperty="test.result">
            <jvmarg value="${memory.initial.param}"/>
            <jvmarg value="${memory.max.param}"/>
            <jvmarg value="${memory.maxpermsize.param}"/>
            <arg value="test"/>
            <arg value="-component=${test.component}"/>
            <arg value="-suitename=${test.suiteName}"/>
            <env key="LC_ALL" value="C"/>
        </java>
        <fail message="Test run was unsuccessful">
            <condition>
                <not>
                    <equals arg1="${test.result}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>
    
	<!--
	<target name="cobertura-report"
            description="Generate a HTML code coverage report with cobertura, can be found in runtime/logs/cobertura-report">
        <delete dir="runtime/logs/cobertura-report"/>
        <mkdir dir="runtime/logs/cobertura-report"/>
        <taskdef resource="tasks.properties">
            <classpath>
                <fileset dir="core/base/lib">
                    <include name="cobertura-1.9.4.1.jar" />
                    <include name="log4j-1.2.16.jar" />
                    <include name="scripting/asm*.jar" />
                </fileset>
            </classpath>
        </taskdef>
        <cobertura-merge datafile="runtime/logs/cobertura.dat">
            <fileset dir="runtime/logs">
                <include name="cobertura-base.dat"/>
                <include name="cobertura-components.dat"/>
            </fileset>
        </cobertura-merge>
        <cobertura-report datafile="runtime/logs/cobertura.dat" destdir="runtime/logs/cobertura-report">
            <dirset dir=".">
                <include name="*/*/src"/>
            </dirset>

            <include name="**/*.java"/>
        </cobertura-report>
    </target>
	
    <target name="cobertura-report-xml"
            description="Generate a XML file from the cobertura report, this will be use by sonar">
        <delete dir="runtime/logs/cobertura-report"/>
        <mkdir dir="runtime/logs/cobertura-report"/>
        <taskdef resource="tasks.properties">
            <classpath>
                <fileset dir="core/base/lib">
                    <include name="cobertura-1.9.4.1.jar" />
                    <include name="log4j-1.2.16.jar" />
                    <include name="scripting/asm*.jar" />
                </fileset>
            </classpath>
        </taskdef>
        <cobertura-merge datafile="runtime/logs/cobertura.dat">
            <fileset dir="runtime/logs">
                <include name="cobertura-base.dat"/>
                <include name="cobertura-components.dat"/>
            </fileset>
        </cobertura-merge>
        <cobertura-report format="xml" datafile="runtime/logs/cobertura.dat" destdir="runtime/logs/cobertura-report">
            <dirset dir=".">
                <include name="*/*/src"/>
            </dirset>
            <include name="**/*.java"/>
        </cobertura-report>
    </target>
	
     

    <target name="full-sonar">
        <antcall target="clean-all"/>
         
        <antcall target="run-tests"/>
        <antcall target="cobertura-report-xml"/>
        <antcall target="sonar"/>
    </target>
	-->
    

    <!-- ================================================================== -->
    <!-- Create New Component. This target will create basic directory structure for an EasyFK component in hot-deploy directory. -->
    <!-- ================================================================== -->
	<target name="apply-create-component"
	            description="创建新基础组件.">
	        <input addproperty="component-name" message="基础组件名称,只能由字母和数字组成: (如: myTestApp) [必须]"/>
	         
	        <echo>基础组件已经创建成功，并保存在hot-deploy目录下:
	                                组件名称: ${component-name}
	                                存放目录: ${basedir}/hot-deploy/${component-name}
	        </echo>
	        <input addproperty="confirm-component-creation" message="Confirm: " defaultvalue="N" validargs="Y,N"/>
	        <fail message="您中止了创建过程.">
	            <condition>
	                <equals arg1="${confirm-component-creation}" arg2="N" casesensitive="false"/>
	            </condition>
	        </fail>
	        <fail message="基础组件名称必须填写">
	            <condition>
	                <equals arg1="${component-name}" arg2="" casesensitive="false" trim="yes"/>
	            </condition>
	        </fail>

	        <filterset id="replacePlaceholders">
	            <filter token="component-name" value="${component-name}"/>
	        </filterset>
	        
	        <mkdir dir="${basedir}/hot-deploy/${component-name}/lib"/>
	    	<mkdir dir="${basedir}/hot-deploy/${component-name}/config"/>
			<mkdir dir="${basedir}/hot-deploy/${component-name}/config/sql/mysql"/>
		    <mkdir dir="${basedir}/hot-deploy/${component-name}/config/sql/oracle"/>
			<mkdir dir="${basedir}/hot-deploy/${component-name}/entitydef/mysql"/>
					
	        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/service"/>
	        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/service/impl"/>
	        <mkdir dir="${basedir}/hot-deploy/${component-name}/documents"/>
	        
	        <copy file="${basedir}/documents/resources/templates/easyfk-component.xml" tofile="${basedir}/hot-deploy/${component-name}/easyfk-application.xml" encoding="utf-8">
	            <filterset refid="replacePlaceholders"/>
	        </copy>
			<copy file="${basedir}/documents/resources/templates/template.sql" tofile="${basedir}/hot-deploy/${component-name}/entitydef/sql/mysql/${component-name}.sql" encoding="utf-8">
			    <filterset refid="replacePlaceholders"/>
			</copy>
					
			<copy file="${basedir}/documents/resources/templates/template.sql" tofile="${basedir}/hot-deploy/${component-name}/entitydef/sql/oracle/${component-name}.sql" encoding="utf-8">
			    <filterset refid="replacePlaceholders"/>
			</copy>

            <copy file="${basedir}/documents/resources/templates/DemoMapper.xml" tofile="${basedir}/hot-deploy/${component-name}/config/sql/mysql/DemoMapper.xml" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>

            <copy file="${basedir}/documents/resources/templates/DemoMapper.xml" tofile="${basedir}/hot-deploy/${component-name}/config/sql/oracle/DemoMapper.xml" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>
			
			<copy file="${basedir}/documents/resources/templates/DemoDao.java" tofile="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/dao/DemoDao.java" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>
	        
	        <copy file="${basedir}/documents/resources/templates/build.xml" tofile="${basedir}/hot-deploy/${component-name}/build.xml" encoding="utf-8">
	            <filterset refid="replacePlaceholders"/>
	        </copy>
	         
	        
	    </target>
	
	<target name="apply-create-web"
            description="创建新WEB应用组件.">
        <input addproperty="component-name" message="WEB应用组件名称,只能由字母和数字组成: (如: myTestApp) [必须]"/>
        <input addproperty="webapp-name" message="webURI名称,只能由小写字母和数字组成: (如: mytestapp) [必须]"/>
        <input addproperty="component-title" message="应用组件标题，请写汉字: (如: 我的应用) [必须]"/>
        
        <echo>应用组件已经创建成功，并保存在hot-deploy目录下:
                                组件名称: ${component-name}
              web名称: ${webapp-name}
                                存放目录: ${basedir}/hot-deploy/${component-name}
        </echo>
        <input addproperty="confirm-component-creation" message="Confirm: " defaultvalue="N" validargs="Y,N,y,n"/>
        <fail message="您中止了创建过程.">
            <condition>
                <equals arg1="${confirm-component-creation}" arg2="N" casesensitive="false"/>
            </condition>
        </fail>
        <fail message="应用组件名称必须填写">
            <condition>
                <equals arg1="${component-name}" arg2="" casesensitive="false" trim="yes"/>
            </condition>
        </fail>
       
        <fail message="web名称必须填写">
            <condition>
                <equals arg1="${webapp-name}" arg2="" casesensitive="false" trim="yes"/>
            </condition>
        </fail>
         
        <filterset id="replacePlaceholders">
            <filter token="component-name" value="${component-name}"/>
            <filter token="webapp-name" value="${webapp-name}"/>
            <filter token="component-title" value="${component-title}"/>
        </filterset>
        
        <mkdir dir="${basedir}/hot-deploy/${component-name}/lib"/>
    	<mkdir dir="${basedir}/hot-deploy/${component-name}/config/sql/mysql"/>
    	<mkdir dir="${basedir}/hot-deploy/${component-name}/config/sql/oracle"/>
	   	<mkdir dir="${basedir}/hot-deploy/${component-name}/entitydef/mysql"/>
		  
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/controller"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/service"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/service/impl"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/tool"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/annotation"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/interceptor"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/tag"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/dao"/>
        
        <mkdir dir="${basedir}/hot-deploy/${component-name}/webapp/META-INF"/>
		
		<mkdir dir="${basedir}/hot-deploy/${component-name}/webapp/WEB-INF/lib"/>
		<mkdir dir="${basedir}/hot-deploy/${component-name}/webapp/resources/js"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/webapp/resources/page"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/webapp/resources/style/icons"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/webapp/resources/style/images"/>
        <mkdir dir="${basedir}/hot-deploy/${component-name}/webapp/resources/config"/>
         
        <mkdir dir="${basedir}/hot-deploy/${component-name}/documents"/>
        
        <copy file="${basedir}/documents/resources/templates/easyfk-application.xml" tofile="${basedir}/hot-deploy/${component-name}/easyfk-application.xml" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
		
		<copy file="${basedir}/documents/resources/templates/template.sql" tofile="${basedir}/hot-deploy/${component-name}/entitydef/sql/mysql/${component-name}.sql" encoding="utf-8">
		    <filterset refid="replacePlaceholders"/>
		</copy>
				
		<copy file="${basedir}/documents/resources/templates/template.sql" tofile="${basedir}/hot-deploy/${component-name}/entitydef/sql/oracle/${component-name}.sql" encoding="utf-8">
		    <filterset refid="replacePlaceholders"/>
		</copy>

        <copy file="${basedir}/documents/resources/templates/DemoMapper.xml" tofile="${basedir}/hot-deploy/${component-name}/config/sql/mysql/DemoMapper.xml" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>

        <copy file="${basedir}/documents/resources/templates/DemoMapper.xml" tofile="${basedir}/hot-deploy/${component-name}/config/sql/oracle/DemoMapper.xml" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>

        <copy file="${basedir}/documents/resources/templates/build.xml" tofile="${basedir}/hot-deploy/${component-name}/build.xml" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
        
        <copy file="${basedir}/documents/resources/templates/DemoController.java" tofile="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/controller/DemoController.java" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
        
        <copy file="${basedir}/documents/resources/templates/DemoService.java" tofile="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/service/DemoService.java" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
        
        <copy file="${basedir}/documents/resources/templates/DemoServiceImpl.java" tofile="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/service/impl/DemoServiceImpl.java" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
		
		<copy file="${basedir}/documents/resources/templates/DemoDao.java" tofile="${basedir}/hot-deploy/${component-name}/src/cn/gorun8/easyfk/${component-name}/dao/DemoDao.java" encoding="utf-8">
               <filterset refid="replacePlaceholders"/>
        </copy>
        <copy file="${basedir}/documents/resources/templates/index.ftl" tofile="${basedir}/hot-deploy/${component-name}/webapp/resources/page/index.ftl" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
		
		<copy file="${basedir}/documents/resources/templates/appcommon.ftl" tofile="${basedir}/hot-deploy/${component-name}/webapp/resources/page/appcommon.ftl" encoding="utf-8">
	        <filterset refid="replacePlaceholders"/>
	    </copy>
    	
    	<copy file="${basedir}/documents/resources/templates/appmenus.ftl" tofile="${basedir}/hot-deploy/${component-name}/webapp/resources/page/appmenus.ftl" encoding="utf-8">
    	    <filterset refid="replacePlaceholders"/>
    	</copy>

        <copy file="${basedir}/documents/resources/templates/web.xml" tofile="${basedir}/hot-deploy/${component-name}/webapp/WEB-INF/web.xml" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
        
        <copy file="${basedir}/documents/resources/templates/MANIFEST.MF" tofile="${basedir}/hot-deploy/${component-name}/webapp/META-INF/MANIFEST.MF" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
        <copy file="${basedir}/documents/resources/templates/shiro-context.xml" tofile="${basedir}/hot-deploy/${component-name}/webapp/WEB-INF/classes/shiro-context.xml" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>
        <copy file="${basedir}/documents/resources/templates/springmvc.xml" tofile="${basedir}/hot-deploy/${component-name}/webapp/WEB-INF/classes/springmvc.xml" encoding="utf-8">
            <filterset refid="replacePlaceholders"/>
        </copy>


        
    </target>
 
	
	<target name="apply-create-themes"
	            description="创建风格组件.">
			<input addproperty="component-name" message="应用组件名称,只能由字母和数字组成: (如: myTestApp) [必须]"/>
	        <input addproperty="webapp-name" message="webURI名称,只能由小写字母和数字组成: (如: mytestapp) [必须]"/>
	        <input addproperty="component-title" message="应用程序标题，请写汉字: (如: 新风格) [必须]"/>
	        
	        <echo>风格组件已经创建成功，并保存在hot-deploy目录下:
	                                组件名称: ${component-name}
	              web名称: ${webapp-name}
	                                存放目录: ${basedir}/themes/${component-name}
	        </echo>
	        <input addproperty="confirm-component-creation" message="Confirm: " defaultvalue="N" validargs="Y,N,y,n"/>
	        <fail message="您中止了创建过程.">
	            <condition>
	                <equals arg1="${confirm-component-creation}" arg2="N" casesensitive="false"/>
	            </condition>
	        </fail>
	        <fail message="风格组件名称必须填写">
	            <condition>
	                <equals arg1="${component-name}" arg2="" casesensitive="false" trim="yes"/>
	            </condition>
	        </fail>
	       
	        <fail message="web名称必须填写">
	            <condition>
	                <equals arg1="${webapp-name}" arg2="" casesensitive="false" trim="yes"/>
	            </condition>
	        </fail>
		         
	    
	        <filterset id="replacePlaceholders">
	            <filter token="component-name" value="${component-name}"/>
	            <filter token="webapp-name" value="${webapp-name}"/>
	            <filter token="component-title" value="${component-title}"/>
	        </filterset>
		
			<mkdir dir="${basedir}/themes/${component-name}/config"/>
			<mkdir dir="${basedir}/themes/${component-name}/webapp"/>
		    <mkdir dir="${basedir}/themes/${component-name}/webapp/js"/>
	        <mkdir dir="${basedir}/themes/${component-name}/webapp/page"/>
	        <mkdir dir="${basedir}/themes/${component-name}/webapp/style/icons"/>
	        <mkdir dir="${basedir}/themes/${component-name}/webapp/style/images"/>
	         
	        <mkdir dir="${basedir}/themes/${component-name}/documents"/>
	        
	        <copy file="${basedir}/documents/resources/templates/easyfk-theme.xml" tofile="${basedir}/themes/${component-name}/easyfk-application.xml" encoding="utf-8">
	            <filterset refid="replacePlaceholders"/>
	        </copy>
	         
	        <copy file="${basedir}/documents/resources/templates/themeweb.xml" tofile="${basedir}/themes/${component-name}/webapp/WEB-INF/web.xml" encoding="utf-8">
	            <filterset refid="replacePlaceholders"/>
	        </copy>
		
			<copy file="${basedir}/documents/resources/templates/themeconfig.properties" tofile="${basedir}/themes/${component-name}/config/${component-name}-theme.properties" encoding="utf-8">
			    <filterset refid="replacePlaceholders"/>
			</copy>
	        
	        <copy file="${basedir}/documents/resources/templates/MANIFEST.MF" tofile="${basedir}/themes/${component-name}/webapp/META-INF/MANIFEST.MF" encoding="utf-8">
	            <filterset refid="replacePlaceholders"/>
	        </copy>
		
			<copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/header.ftl" encoding="utf-8">
			    <filterset refid="replacePlaceholders"/>
			</copy>
			<copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/footer.ftl" encoding="utf-8">
			    <filterset refid="replacePlaceholders"/>
			</copy>
			<copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/message.ftl" encoding="utf-8">
		        <filterset refid="replacePlaceholders"/>
			</copy>
			<copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/top.ftl" encoding="utf-8">
		        <filterset refid="replacePlaceholders"/>
			</copy>
			<copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/left.ftl" encoding="utf-8">
		        <filterset refid="replacePlaceholders"/>
			</copy>
			<copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/right.ftl" encoding="utf-8">
		        <filterset refid="replacePlaceholders"/>
			</copy>
            <copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/404.ftl" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>

            <copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/login.ftl" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>

            <copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/navbar.ftl" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>
            <copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/pagebar.ftl" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>
            <copy file="${basedir}/documents/resources/templates/themepart.ftl" tofile="${basedir}/themes/${component-name}/webapp/page/contextmenu.ftl" encoding="utf-8">
                <filterset refid="replacePlaceholders"/>
            </copy>
	    </target>
	 
    <!-- ================================================================== -->
    <!-- Deploy Applicitions depends="clean-all ,build"                                                 -->
    <!-- ================================================================== -->
	
	<target name="dist" description="编译整个工程生成安装包" depends="clean-all ,build">
        <echo message="[docs] ========== start deploy applications=========="/>
		<mkdir dir="${basedir}/build"/>
		<mkdir dir="${basedir}/build/release"/>
		<mkdir dir="${basedir}/build/dist"/>
		<mkdir dir="${basedir}/build/release/core"/>
		<mkdir dir="${basedir}/build/release/themes"/>
		<mkdir dir="${basedir}/build/release/runtime"/>
		<mkdir dir="${basedir}/build/release/baseapps"/>
		<mkdir dir="${basedir}/build/release/hot-deploy"/>
		
		<copy todir="${basedir}/build/release/core" overwrite="true">
            <fileset dir="${basedir}/core">
				<exclude name="**/README"/> 
			    <exclude name="**/build.xml"/> 
                <exclude name="**/build/classes/**"/> 
                <exclude name="**/src/**"/>
            	<exclude name="**/testtools/**"/>
            	<exclude name="**/appserver/**"/>
            	<exclude name="**/resources/**"/>
            	<exclude name="**/appserver/templates/**"/>
            	<!--
            	<exclude name="**/base/config/installwithxml-containers.xml"/>
				<exclude name="**/base/config/install.lock"/>
				-->
		    </fileset>
        </copy>
		
		<copy todir="${basedir}/build/release/hot-deploy" overwrite="true">
            <fileset dir="${basedir}/hot-deploy">
				<exclude name="**/build.xml"/> 
				<exclude name="**/README"/> 
                <exclude name="**/build/classes/**"/> 
                <exclude name="**/documents/**"/>
				<exclude name="**/src/**"/>
            </fileset>
        </copy>
		
		<copy todir="${basedir}/build/release/" overwrite="true">
            <fileset dir="${basedir}/platforms/linux">
            	<include name="installdatawithxml.sh"/>
            	<include name="starteasyfk.sh"/>
            	<include name="stopeasyfk.sh"/>
		    </fileset>
			<fileset dir="${basedir}/platforms/windows">
				<include name="installdatawithxml.bat"/>
				<include name="starteasyfk.bat"/>
				<include name="stopeasyfk.bat"/>
			</fileset>
        </copy>
		    	
		<copy todir="${basedir}/build/release/runtime" overwrite="true">
            <fileset dir="${basedir}/runtime">
				<include name="**/catalina/**"/> 
				<include name="**/tempfiles/**"/> 
				<include name="**/data/**"/> 
			</fileset>
        </copy>

		<copy todir="${basedir}/build/release/baseapps" overwrite="true">
            <fileset dir="${basedir}/baseapps">
				<exclude name="**/README"/> 
				<exclude name="start/**"/> 
			    <exclude name="**/build.xml"/> 
                <exclude name="**/build/classes/**"/> 
                <exclude name="**/documents/**"/>
				<exclude name="**/src/**"/>
            </fileset>
        </copy>
		
		<copy todir="${basedir}/build/release/themes" overwrite="true">
            <fileset dir="${basedir}/themes">
		    </fileset>
        </copy>
		 
	    <echo message="[release] ========== Done deploy  =========="/>
		
		<zip destfile="${basedir}/build/dist/${ant.project.name}.zip">
			<zipfileset dir="${basedir}/build/release/" prefix="${ant.project.name}">
				<include name="**/*"/>
			</zipfileset>
		</zip>
		<delete includeemptydirs="true" dir="${basedir}/build/release"/>
        
	</target>
	<target name="clean-dist" >
		<echo>清除临时文件</echo>
		<delete dir="${basedir}/build/release/" />
        <!--
        <delete file="${basedir}/core/base/config/install.lock"/>
        -->
	</target>
	
</project>
