<?xml version="1.0" encoding="UTF-8"?>
<!--
   Project:Easy Web Framework
   Description:
   EasyFK stands for Easy Web Framework.It's an open source product for E-Business / E-Commerce.It
   was launched by a chinese Hezhiping(QQ:110476592) in 2015.The goal of EasyFK is to  provide a
   foundation and starting point for reliable, secure , simple-to-use ,cost-effective ,scalable
   and suitable-for-Chinese E-Business / E-Commerce solutions. With EasyFK, you can get started
   right away without the huge deployment and maintenance costs of E-Business / E-Commerce systems.
   Of course, you can customize it or use it as a framework to implement your most challenging business needs.
   EasyFk is licensed under the Apache License Version 2.0.  You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
   Author:hezhiping   Email:110476592@qq.com
-->
<!--
	本文件用于保护product组件的安全保护,采Shiro技术实现.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:c="http://www.springframework.org/schema/c" xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	   xmlns:lang="http://www.springframework.org/schema/lang" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!--资源管理器-->
	<bean id="uiLabelMap" class="cn.gorun8.easyfk.base.util.collections.ResourceBundleMessageSource"
		   init-method="init">
		<property name="labelMapName" value="uiLabelMap"></property>
		<property name="basenames">
			<list>
				<value>CommonUiLabels</value>
				<value>CommonTypeLabels</value>
				<value>ProductUiLabels</value>
				<value>ProductErrorLabels</value>
			</list>
		</property>
	</bean>

	<bean id="requestInitFilter" class="cn.gorun8.easyfk.security.shiro.RequestInitFilter">
		<property name="uiLabelMap" ref="uiLabelMap"/>
	</bean>

	<bean id="casFilter" class="cn.gorun8.easyfk.security.shiro.CasFilter">
		<property name="domain" value="${security.sessionIdCookie.domain}"/>
        <property name="loginURL" value="${security.login.url}"/>
	</bean>

	<bean id="x509RetryLimitMatcher" class="cn.gorun8.easyfk.security.shiro.x509.X509RetryLimitMatcher">
		<!--
        <constructor-arg ref="cacheManager"/>
         -->
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <bean id="passwordRetryLimitMatcher" class="cn.gorun8.easyfk.security.shiro.passwd.PasswordRetryLimitMatcher">
        <!--
        <constructor-arg ref="cacheManager"/>
         -->
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>
    <bean id="exceptionStopStrategy" class="cn.gorun8.easyfk.security.shiro.ExceptionStopStrategy"></bean>


    <!-- shiro redisManager -->
    <bean id="redisManager" class="cn.gorun8.easyfk.security.shiro.cache.RedisManager">
        <property name="host" value="${security.session.cache.redis.host}"/>
        <property name="port" value="${security.session.cache.redis.port}"/>
        <property name="expire" value="${security.session.cache.redis.expire.second}"/>
        <!-- optional properties:
         <property name="timeout" value="${security.session.cache.redis.timeout.second}"/>
        <property name="password" value="${security.session.cache.redis.password}"/>
        -->
    </bean>

	<!-- cacheSessionDAO ,默认采用redis缓存:easyFKManager设为redisManager,如果要用其它缓存只要改变easyFKManager即可-->
	<bean id="cacheSessionDAO" class="cn.gorun8.easyfk.security.shiro.cache.CacheSessionDAO">
		<property name="cacheManager" ref="redisManager"/>
	</bean>

	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe"/>
		<property name="httpOnly" value="true"/>
		<property name="maxAge" value="2592000"/><!-- 30天 -->
	</bean>
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="cn.gorun8.easyfk.security.shiro.EasyfkRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
		<property name="cipherKey"
				  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
		<property name="cookie" ref="rememberMeCookie"/>
	</bean>

	<!-- sessionManager -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<property name="sessionDAO" ref="cacheSessionDAO"/>
		<!-- <property name="sessionValidationScheduler" ref="shiroSessionValidationScheduler"/> -->
        <property name="sessionValidationInterval" value="${security.sessionValidationInterval.second}"/>
        <property name="globalSessionTimeout" value="${security.globalSessionTimeout.second}"/>
        <property name="sessionIdCookie.domain" value="${security.sessionIdCookie.domain}"/>
        <property name="sessionIdCookie.name" value="${security.sessionIdCookie.name}"/>
        <property name="sessionIdCookie.path" value="${security.sessionIdCookie.path}"/>
		<property name="sessionIdCookie.httpOnly" value="true"/>
		<property name="sessionIdCookie.maxAge" value="-1"/><!-- -1 表示浏览器关闭时失效此Cookie-->
        <!-- <property name="sessionListeners">
            <list>
                <bean class=""/>
            </list>
        </property> -->
    </bean>

	<!-- cacheManager -->
	<bean id="easyFKCacheManager" class="cn.gorun8.easyfk.security.shiro.cache.EasyFKCacheManager">
		<property name="cacheManager" ref="redisManager" />
	</bean>

	<bean id="easyFKSubjectFactory" class="cn.gorun8.easyfk.security.shiro.EasyFKWebSubjectFactory">
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realms">
			<list>
				<bean id="passwordRealm" class="cn.gorun8.easyfk.security.shiro.passwd.PasswordRealm">
					<property name="credentialsMatcher" ref="passwordRetryLimitMatcher"/>
				</bean>
				<bean id="x509Realm" class="cn.gorun8.easyfk.security.shiro.x509.X509Realm">
					<property name="credentialsMatcher" ref="x509RetryLimitMatcher" />
				</bean>
			</list>
		</property>

		<property name="authenticator.authenticationStrategy" ref="exceptionStopStrategy" />
		<property name="sessionManager" ref="sessionManager" />
		<property name="cacheManager" ref="easyFKCacheManager" />
		<property name="subjectFactory" ref="easyFKSubjectFactory"/>
		<property name="rememberMeManager" ref="rememberMeManager"/>

		<!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
		<!-- <property name="sessionMode" value="native"/> -->

	</bean>


	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="${security.login.url}" />
		<!-- <property name="unauthorizedUrl" value="/error" /> -->
		<property name="filters">
			<map>
				<entry key="reqinit" value-ref="requestInitFilter"/>
				<entry key="cas" value-ref="casFilter"/>
			</map>
		</property>
		<property name="filterChainDefinitions">
			<value>
				<!--
				/login/** = anon,reqinit
				/loginajax/** = anon
				/style/** = anon
				/commjson/** = anon
				/js/** = anon
				/** = cas,reqinit
				-->
				/** = anon,reqinit

			</value>
		</property>
	</bean>

</beans>
